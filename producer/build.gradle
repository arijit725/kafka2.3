/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/java_library_plugin.html
 */
 
plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java'
    id 'eclipse'
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}



//plugins {
//  id 'org.springframework.boot' version '2.1.8.RELEASE'
//  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
//}

group = 'org.arijit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8


bootJar {
    baseName = 'Kafka-Producer'
    version =  version
    mainClassName = 'org.arijit.kafka.daemon.KafkProducerDaemon'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

ext {
  set('springCloudVersion', "Greenwich.SR3")
}

configurations {
    all {
    	  //ecluding default boot starter logging as we want to use log4j2
          exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
      }
}
dependencies {
  implementation 'org.springframework.boot:spring-boot-starter'
  implementation 'org.springframework.boot:spring-boot-starter-log4j2'
  // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
//compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.3.0'
  implementation 'org.apache.kafka:kafka-clients:2.3.0'
    implementation 'org.apache.kafka:kafka_2.12:2.3.0'
  //testImplementation 'org.springframework:spring-test:3.2.2.RELEASE'
  // https://mvnrepository.com/artifact/org.springframework/spring-test
   //compile group: 'org.springframework', name: 'spring-test', version: '5.1.3.RELEASE'
  
  // https://mvnrepository.com/artifact/org.testng/testng
  compile group: 'org.testng', name: 'testng', version: '6.14.3'

   testCompile group: 'org.springframework', name: 'spring-test', version: '5.1.3.RELEASE'
  
  
  testImplementation 'org.springframework.boot:spring-boot-starter'
  testImplementation 'org.springframework.boot:spring-boot-starter-log4j2'
  testImplementation 'org.apache.kafka:kafka-clients:2.3.0'
  
  // https://mvnrepository.com/artifact/org.testng/testng
  //testCompile group: 'org.testng', name: 'testng', version: '6.14.3'

  //testImplementation 'org.springframework.boot:spring-boot-starter-test'
}




test {

	useTestNG()
	include 'org.arijit.test/**'
	exclude 'org.arijit.kafka/**'
	
	testLogging.showStandardStreams = true

   // set heap size for the test JVM(s)
   minHeapSize = "128m"
   maxHeapSize = "512m"

   // set JVM arguments for the test JVM(s)
   jvmArgs '-XX:MaxPermSize=256m'
   
   // listen to events in the test execution lifecycle
   beforeTest { 
      descriptor -> logger.lifecycle("Running test: " + descriptor)
   }

   // listen to standard out and standard error of the test JVM(s)
   onOutput { 
      descriptor, event -> logger.lifecycle
         ("Test: " + descriptor + " produced standard out/err: " 
         + event.message )
   }
}
