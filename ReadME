Kafka Producer:
===============

Kafka Producer will send messages to kafka topic.
User has complete previleges to configure Kafka Producer. 
In this example:
	 1. KafkaProducerService configures Kafka producer.
	 2. KafkaProducerWrapper specify producing message key & value type. 
	 	Also here KafkaProducerWrapper are pre-configured for a particular topic, 
	 	which means you need to create individual KafkaProducerWrapper for each topic.
	 	KafkaProducerWrapper will have sendSync() and sendAsync() method to send records to kafka.	 	
	 3. To send message to kafka in this application, One needs to create message of type KafkaMessageDto.



Kafka Consumer will Consume messages from kafka topic.
	1. There is a concept of consumer group in kafka. All instances of same kafka consumer will consume from kafka topic colaboratively.
	2. Each instance/thread of consumer will communicate to individual partiotion. No two kafka consumer instance/thread in same consumer group will consume message from same partition.
	3. If the number of consumer instance/thread is more than number of partition in topic, rest instances will stay idle.
	4. If the number of consumer instance/thread is less than number of partition in topic, each instance will communicate will multiple partition. But no two instance will share partition.
	 	 
	 
Note:
Role of key in Kafka:
	1. The key is commonly used for partitioning and is particularly important if modeling a Kafka topic as a table in KSQL (or KTable in Kafka Streams) for query or join purposes.	
	2. If a valid partition number is specified that partition will be used when sending the record. If no partition is specified but a key is present a partition will be chosen using a hash of the key. 
	If neither key nor partition is present a partition will be assigned in a round-robin fashion.	  
	3. Replication factor in kafka is completly different than topic partition. Topic partition gives you means to achive more 
       parallalism to your application.
       But Replication factor make sure that you do not lose you data. If your Leader fails then one of replication follower will serve your data. 
	4. There could be chance that you may not consume last couple of message. This happens when producer does not gather much record till it reaches it buffer size and waiting for linger.ms time to over.
	   Once the buffer is not even full but linger.ms time is over, kafka producer will send message. But in between that time, if you kill kafka producer, your message is lost forever.
	    
	
Quick Console Command:
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092,localhost:9093 --topic topic-1 --from-beginning
bin/kafka-topics.sh --describe --bootstrap-server localhost:9092 --topic topic-1	
bin/kafka-topics.sh --zookeeper localhost:2181 --delete --topic topic-1
bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic testtopic
